---
- hosts: raspberrypi
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
    mosquitto_user: "shelly"
    mosquitto_password: "pw123456"

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Add Mosquitto repository key
      apt_key:
        url: https://repo.mosquitto.org/debian/mosquitto-repo.gpg.key
        state: present

    - name: Add Mosquitto repository
      apt_repository:
        repo: "deb http://repo.mosquitto.org/debian buster main"
        state: present
        filename: "mosquitto"
        update_cache: yes
      register: mosquitto_repo_added

    - name: Remove Mosquitto
      apt:
        name: mosquitto
        state: absent
        purge: yes

    - name: Remove InfluxDB, Telegraf, and Chronograf
      apt:
        name:
          - influxdb
          - telegraf
          - chronograf
        state: absent
        purge: yes

    - name: Remove Grafana
      apt:
        name: grafana
        state: absent
        purge: yes

    - name: Clean up Mosquitto directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/mosquitto
        - /var/lib/mosquitto
        - /var/log/mosquitto

    - name: Clean up InfluxDB directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/influxdb
        - /var/lib/influxdb
        - /var/log/influxdb

    - name: Clean up Telegraf directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/telegraf
        - /var/lib/telegraf
        - /var/log/telegraf

    - name: Clean up Chronograf directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/chronograf
        - /var/lib/chronograf
        - /var/log/chronograf

    - name: Clean up Grafana directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/grafana
        - /var/lib/grafana
        - /var/log/grafana

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Install Mosquitto
      apt:
        name: mosquitto
        state: present

    - name: Create and set permissions for /run/mosquitto
      file:
        path: /run/mosquitto
        state: directory
        owner: mosquitto
        group: mosquitto
        mode: '0750'

    - name: Configure Mosquitto
      copy:
        dest: /etc/mosquitto/mosquitto.conf
        content: |
          pid_file /run/mosquitto/mosquitto.pid
          persistence true
          persistence_location /var/lib/mosquitto/
          log_dest file /home/siddy/mqtt/logfile.log
          log_type all
          log_timestamp true
          log_timestamp_format %Y-%m-%dT%H:%M:%S
          include_dir /etc/mosquitto/conf.d
          password_file /etc/mosquitto/pw.passwd
          allow_anonymous false
          listener 1883
          max_connections -1

    - name: Create Mosquitto password file
      command: mosquitto_passwd -b -c /etc/mosquitto/pw.passwd {{ mosquitto_user }} {{ mosquitto_password }}
      args:
        creates: /etc/mosquitto/pw.passwd

    - name: Set permissions for Mosquitto password file
      file:
        path: /etc/mosquitto/pw.passwd
        owner: mosquitto
        group: mosquitto
        mode: '0600'

    - name: Create log directory for Mosquitto
      file:
        path: /home/siddy/mqtt/logfile.log
        state: touch
        owner: mosquitto
        group: mosquitto
        mode: '0644'

    - name: Ensure /etc/mosquitto/conf.d directory exists
      file:
        path: /etc/mosquitto/conf.d
        state: directory
        owner: mosquitto
        group: mosquitto
        mode: '0755'

    - name: Restart Mosquitto service
      become: true
      become_method: sudo
      systemd:
        name: mosquitto
        state: restarted
        enabled: yes
      register: mosquitto_restart_result
      failed_when: mosquitto_restart_result.failed

    - name: Check Mosquitto service status
      command: systemctl status mosquitto.service
      register: mosquitto_status
      failed_when: false
      when: mosquitto_restart_result.failed

    - name: Print Mosquitto service status
      debug:
        var: mosquitto_status.stdout
      when: mosquitto_restart_result.failed

    - name: Check journal for Mosquitto errors
      command: journalctl -xe
      register: mosquitto_journal
      failed_when: false
      when: mosquitto_restart_result.failed

    - name: Print journal errors
      debug:
        var: mosquitto_journal.stdout
      when: mosquitto_restart_result.failed

    - name: Clean apt cache
      apt:
        update_cache: yes
        autoclean: yes

    - name: Remove problematic package if exists
      apt:
        name: influxdb
        state: absent
        purge: yes
      ignore_errors: yes

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install InfluxDB, Telegraf, and Chronograf
      apt:
        name:
          - influxdb
          - telegraf
          - chronograf
        state: present

    - name: Ensure InfluxDB directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: influxdb
        group: influxdb
        mode: '0755'
      loop:
        - /var/lib/influxdb/meta
        - /var/lib/influxdb/data
        - /var/lib/influxdb/wal

    - name: Start and enable InfluxDB service
      become: true
      become_method: sudo
      systemd:
        name: influxdb
        enabled: yes
        state: started

    - name: Install Python influxdb module
      pip:
        name: influxdb
        state: present

    - name: Configure Telegraf
      copy:
        dest: /etc/telegraf/telegraf.conf
        content: |
          [global_tags]
          [agent]
            interval = "10s"
            round_interval = true
            metric_batch_size = 1000
            metric_buffer_limit = 10000
            collection_jitter = "0s"
            flush_interval = "10s"
            flush_jitter = "0s"
            precision = "0s"
            hostname = ""
            omit_hostname = false
            
          [[inputs.cpu]]
            percpu = true
            totalcpu = true
            collect_cpu_time = false
            report_active = false
            core_tags = false
            
          [[inputs.disk]]
            ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
            
          [[inputs.diskio]]
          
          [[inputs.kernel]]
          
          [[inputs.mem]]
          
          [[inputs.processes]]
          
          [[inputs.swap]]
          
          [[inputs.system]]
          
          [[inputs.mqtt_consumer]]
            servers = ["tcp://raspberrypi:1883"]
            topics = [
              "shelly_lamp_1/#",
              "shelly_lamp_2/#",
              "shelly_dave_desk/#"
            ]
            username = "{{ mosquitto_user }}"
            password = "{{ mosquitto_password }}"
            data_format = "json"
          
          [[outputs.influxdb]]
            urls = ["http://raspberrypi:8086"]
            database = "shelly"

    - name: Start and enable Telegraf service
      become: true
      become_method: sudo
      systemd:
        name: telegraf
        enabled: yes
        state: started
      register: telegraf_restart_result
      failed_when: telegraf_restart_result.failed

    - name: Check Telegraf service status
      command: systemctl status telegraf.service
      register: telegraf_status
      failed_when: false
      when: telegraf_restart_result.failed

    - name: Print Telegraf service status
      debug:
        var: telegraf_status.stdout
      when: telegraf_restart_result.failed

    - name: Check journal for Telegraf errors
      command: journalctl -xe
      register: telegraf_journal
      failed_when: false
      when: telegraf_restart_result.failed

    - name: Print journal errors
      debug:
        var: telegraf_journal.stdout
      when: telegraf_restart_result.failed

    - name: Install Grafana repository key
      apt_key:
        url: https://packages.grafana.com/gpg.key
        state: present

    - name: Add Grafana repository
      apt_repository:
        repo: deb https://packages.grafana.com/oss/deb stable main
        state: present

    - name: Install Grafana
      apt:
        name: grafana
        state: present

    - name: Configure Grafana
      copy:
        dest: /etc/grafana/grafana.ini
        content: |
          #################################### Paths ####################################
          [paths]
          data = /var/lib/grafana
          logs = /var/log/grafana
          plugins = /var/lib/grafana/plugins

          #################################### Server ####################################
          [server]
          protocol = http
          http_port = 3000
          domain = localhost
          enforce_domain = false
          root_url = %(protocol)s://%(domain)s:%(http_port)s/

          #################################### Database ####################################
          [database]
          type = sqlite3
          path = grafana.db

          #################################### Auth ######################
          [auth.anonymous]
          enabled = false
          org_name = My castle
          org_role = Viewer

    - name: Start and enable Grafana service
      become: true
      become_method: sudo
      systemd:
        name: grafana-server
        enabled: yes
        state: started

    - name: Create InfluxDB database
      influxdb_database:
        database_name: shelly
        state: present

    - name: Start and enable Chronograf service
      become: true
      become_method: sudo
      systemd:
        name: chronograf
        enabled: yes
        state: started
